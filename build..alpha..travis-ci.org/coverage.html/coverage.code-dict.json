{"/home/travis/build/npmtest/node-npmtest-gulp-include/test.js":"/* istanbul instrument in package npmtest_gulp_include */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-include/lib.npmtest_gulp_include.js":"/* istanbul instrument in package npmtest_gulp_include */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_include = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_include = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-include/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-include && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_include */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_include\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_include.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_include.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_include.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_include.__dirname + '/lib.npmtest_gulp_include.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-include/node_modules/gulp-include/index.js":"var fs = require('fs'),\n    path = require('path'),\n    es = require('event-stream'),\n    gutil = require('gulp-util'),\n    glob = require('glob'),\n    applySourceMap = require('vinyl-sourcemaps-apply'),\n    stripBom = require('strip-bom');\n\nmodule.exports = function (params) {\n  params = params || {};\n\n  var SourceMapGenerator = require('source-map').SourceMapGenerator;\n  var SourceMapConsumer = require('source-map').SourceMapConsumer;\n\n  var extensions = null, // The extension to be searched after\n      includedFiles = [], // Keeping track of what files have been included\n      includePaths = false, // The paths to be searched\n      hardFail = false; // Throw error when no match\n\n  // Check for includepaths in the params\n  if (params.includePaths) {\n    if (typeof params.includePaths == \"string\") {\n      // Arrayify the string\n      includePaths = [params.includePaths];\n    }else if (Array.isArray(params.includePaths)) {\n      // Set this array to the includepaths\n      includePaths = params.includePaths;\n    }\n  }\n\n  // Toggle error reporting\n  if (params.hardFail != undefined) {\n    hardFail = params.hardFail;\n  }\n\n  if (params.extensions) {\n    extensions = typeof params.extensions === 'string' ? [params.extensions] : params.extensions;\n  }\n\n  function include(file, callback) {\n    if (file.isNull()) {\n      return callback(null, file);\n    }\n\n    if (file.isStream()) {\n      throw new gutil.PluginError('gulp-include', 'stream not supported');\n    }\n\n    if (file.isBuffer()) {\n      var result = processInclude(String(file.contents), file.path, file.sourceMap);\n      file.contents = new Buffer(result.content);\n\n      if (file.sourceMap && result.map) {\n        if (Object.prototype.toString.call(result.map) === '[object String]') {\n          result.map = JSON.parse(result.map);\n        }\n\n        // relative-ize the paths in the map\n        result.map.file = path.relative(file.base, result.map.file);\n        result.map.sources.forEach(function (source, q) {\n          result.map.sources[q] = path.relative(file.base, result.map.sources[q]);\n        });\n\n        applySourceMap(file, result.map);\n      }\n    }\n\n    callback(null, file);\n  }\n\n  function processInclude(content, filePath, sourceMap) {\n    var matches = content.match(/^(\\s+)?(\\/\\/|\\/\\*|\\#|\\<\\!\\-\\-)(\\s+)?=(\\s+)?(include|require)(.+$)/mg);\n    var relativeBasePath = path.dirname(filePath);\n\n    if (!matches) return {content: content, map: null};\n\n    // Apply sourcemaps\n    var map = null, mapSelf, lastMappedLine, currentPos, insertedLines;\n    if (sourceMap) {\n      map = new SourceMapGenerator({file: unixStylePath(filePath)});\n      lastMappedLine = 1;\n      currentPos = 0;\n      insertedLines = 0;\n\n      mapSelf = function (currentLine) { // maps current file between matches and after all matches\n        var currentOrigLine = currentLine - insertedLines;\n\n        for (var q = (currentLine - lastMappedLine); q > 0; q--) {\n          map.addMapping({\n            generated: {\n              line: currentLine - q,\n              column: 0\n            },\n            original: {\n              line: currentOrigLine - q,\n              column: 0\n            },\n            source: filePath\n          });\n        }\n\n        lastMappedLine = currentLine;\n      };\n    }\n\n    for (var i = 0; i < matches.length; i++) {\n      var leadingWhitespaceMatch = matches[i].match(/^\\s*/);\n      var leadingWhitespace = null;\n      if (leadingWhitespaceMatch) {\n        leadingWhitespace = leadingWhitespaceMatch[0].replace(\"\\n\", \"\");\n      }\n\n      // Remove beginnings, endings and trim.\n      var includeCommand = matches[i]\n        .replace(/\\s+/g, \" \")\n        .replace(/(\\/\\/|\\/\\*|\\#|<!--)(\\s+)?=(\\s+)?/g, \"\")\n        .replace(/(\\*\\/|-->)$/g, \"\")\n        .replace(/['\"]/g, \"\")\n        .trim();\n\n      var split = includeCommand.split(\" \");\n\n      var currentLine;\n      if (sourceMap) {\n        // get position of current match and get current line number\n        currentPos = content.indexOf(matches[i], currentPos);\n        currentLine = currentPos === -1 ? 0 : content.substr(0, currentPos).match(/^/mg).length;\n\n        // sometimes the line matches the leading \\n and sometimes it doesn't. wierd.\n        // in case it does, increment the current line counter\n        if (leadingWhitespaceMatch[0][0] == '\\n') currentLine++;\n\n        mapSelf(currentLine);\n      }\n\n      // SEARCHING STARTS HERE\n      // Split the directive and the path\n      var includeType = split[0];\n\n      // Use glob for file searching\n      var fileMatches = [];\n      var includePath = \"\";\n\n      if (includePaths != false) {\n        // If includepaths are set, search in those folders\n        for (var y = 0; y < includePaths.length; y++) {\n          includePath = includePaths[y] + \"/\" + split[1];\n\n          var globResults = glob.sync(includePath, {mark: true});\n          fileMatches = fileMatches.concat(globResults);\n        }\n      }else{\n        // Otherwise search relatively\n        includePath = relativeBasePath + \"/\" + split[1];\n        var globResults = glob.sync(includePath, {mark: true});\n        fileMatches = globResults;\n      }\n\n      if (fileMatches.length < 1) fileNotFoundError(includePath);\n\n      var replaceContent = '';\n      for (var y = 0; y < fileMatches.length; y++) {\n        var globbedFilePath = fileMatches[y];\n\n        // If directive is of type \"require\" and file already included, skip to next.\n        if (includeType == \"require\" && includedFiles.indexOf(globbedFilePath) > -1) continue;\n\n        // If not in extensions, skip this file\n        if (!inExtensions(globbedFilePath)) continue;\n\n        // Get file contents and apply recursive include on result\n        // Unicode byte order marks are stripped from the start of included files\n        var fileContents = stripBom(fs.readFileSync(globbedFilePath));\n\n        var result = processInclude(fileContents.toString(), globbedFilePath, sourceMap);\n        var resultContent = result.content;\n\n        if (sourceMap) {\n          var lines = resultContent.match(/^/mg).length; //count lines in result\n\n          if (result.map) { // result had a map, merge mappings\n            if (Object.prototype.toString.call(result.map) === '[object String]') {\n              result.map = JSON.parse(result.map);\n            }\n\n            if (result.map.mappings && result.map.mappings.length > 0) {\n              var resultMap = new SourceMapConsumer(result.map);\n              resultMap.eachMapping(function (mapping) {\n                if (!mapping.source) return;\n\n                map.addMapping({\n                  generated: {\n                    line: mapping.generatedLine + currentLine - 1,\n                    column: mapping.generatedColumn + (leadingWhitespace ? leadingWhitespace.length : 0)\n                  },\n                  original: {\n                    line: mapping.originalLine,\n                    column: mapping.originalColumn\n                  },\n                  source: mapping.source,\n                  name: mapping.name\n                });\n              });\n\n              if (result.map.sourcesContent) {\n                result.map.sourcesContent.forEach(function(sourceContent, i) {\n                  map.setSourceContent(result.map.sources[i], sourceContent);\n                });\n              }\n            }\n          } else { // result was a simple file, map whole file to new location\n            for (var q = 0; q < lines; q++) {\n              map.addMapping({\n                generated: {\n                  line: currentLine + q,\n                  column: leadingWhitespace ? leadingWhitespace.length : 0\n                },\n                original: {\n                  line: q + 1,\n                  column: 0\n                },\n                source: globbedFilePath\n              });\n            }\n\n            if (sourceMap.sourcesContent) {\n              map.setSourceContent(globbedFilePath, resultContent);\n            }\n          }\n\n          // increment/set map line counters\n          insertedLines += lines;\n          currentLine += lines;\n          lastMappedLine = currentLine;\n        }\n\n        if (includedFiles.indexOf(globbedFilePath) == -1) includedFiles.push(globbedFilePath);\n\n        // If the last file did not have a line break, and it is not the last file in the matched glob,\n        // add a line break to the end\n        if (!resultContent.trim().match(/\\n$/) && y != fileMatches.length-1) {\n          resultContent += \"\\n\";\n        }\n\n        if (leadingWhitespace) resultContent = addLeadingWhitespace(leadingWhitespace, resultContent);\n\n        replaceContent += resultContent;\n      }\n\n      // REPLACE\n      if (replaceContent.length) {\n        // sometimes the line matches the leading \\n and sometimes it doesn't. wierd.\n        // in case it does, preserve that leading \\n\n        if (leadingWhitespaceMatch[0][0] === '\\n') {\n          replaceContent = '\\n' + replaceContent;\n        }\n\n        content = content.replace(matches[i], function() { return replaceContent });\n        insertedLines--; // adjust because the original line with comment was removed\n      }\n    }\n\n    if (sourceMap) {\n      currentLine = content.match(/^/mg).length + 1;\n\n      mapSelf(currentLine);\n    }\n\n    return {content: content, map: map ? map.toString() : null};\n  }\n\n  function unixStylePath(filePath) {\n    return filePath.replace(/\\\\/g, '/');\n  }\n\n  function addLeadingWhitespace(whitespace, string) {\n    return string.split(\"\\n\").map(function(line) {\n      return whitespace + line;\n    }).join(\"\\n\");\n  }\n\n  function fileNotFoundError(includePath) {\n    if (hardFail) {\n      throw new gutil.PluginError('gulp-include', 'No files found matching ' + includePath);\n    }else{\n      console.warn(\n        gutil.colors.yellow('WARN: ') +\n        gutil.colors.cyan('gulp-include') +\n        ' - no files found matching ' + includePath\n      );\n    }\n  }\n\n  function inExtensions(filePath) {\n    if (!extensions) return true;\n    for (var i = 0; i < extensions.length; i++) {\n      var re = extensions[i] + \"$\";\n      if (filePath.match(re)) return true;\n    }\n    return false;\n  }\n\n  return es.map(include)\n};\n"}